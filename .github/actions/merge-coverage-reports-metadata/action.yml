name: TODO
description: TODO
inputs:
  root:
    description: TODO
    required: true
outputs:
  info:
    description: Info
    value: ${{ steps.main.outputs.info }}
  matrix:
    description: Matrix
    value: ${{ steps.main.outputs.matrix }}
  reports:
    description: Reports
    value: ${{ steps.main.outputs.reports }}

runs:
  using: "composite"
  steps:
    - id: validate
      uses: actions/github-script@v7
      env:
        ROOT: ${{ inputs.root }}
      with:
        script: |
          const { ROOT } = process.env;

          await core.group('Validate inputs', async () => {
            core.debug(`ROOT='${ROOT}'`);
            if (0 === ROOT.trim().length) {
              core.setFailed('You must provide a root directory !');
            }
          });

    - id: main
      uses: actions/github-script@v7
      env:
        ROOT: ${{ inputs.root }}
      with:
        script: |
          const {resolve: pathResolve, dirname: pathDirname} = require('path');
          const fs = require('fs');

          const { ROOT } = process.env;

          const absoluteRoot = pathResolve(ROOT);

          const metadataFileList = await core.group('Find metadata files', async () => {
            const res = [];
            const globber = await glob.create(`${absoluteRoot}/**/coverage-report-metadata.json`);
            for await (const file of globber.globGenerator()) {
              core.info(`Found ${file}`);
              const filepath = file.replace(`${absoluteRoot}/`, '');

              core.debug(`filepath='${filepath}'`);

              res.push(filepath);
            }
            return res;
          });
          core.debug(`metadataFileList='${JSON.stringify(metadataFileList)}'`);

          const info = await core.group('Gather info', async () => {
            const res = [];
            for (const file of metadataFileList) {
              core.debug(`file='${file}'`);

              const fullPath = pathDirname(file);

              core.info(`Process ${fullPath} directory`);

              const globber = await glob.create(`${absoluteRoot}/${fullPath}/report-*`);
              const reportList = JSON.parse(REPORTS).map(fp => fp.replace(`${absoluteRoot}/${fullPath}/`, ''));
              const metadataContent = fs.readFileSync(file);

              const item = {path: fullPath, metadata: JSON.parse(metadataContent), reports: reportList};

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const infoString = JSON.stringify(info);
          core.debug(`info='${infoString}'`);

          core.setOutput("info", infoString);

          const matrixInclude = await core.group('Build matrix', async () => {
            const res = [];
            for (const data of info) {
              const item = {
                name: data.metadata.name,
                format: data.metadata.format,
                path: data.path,
                reports: JSON.stringify(data.reports),
                flags: JSON.stringify(data.metadata.flags),
              };

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const matrix = {include: matrixInclude};

          const matrixString = JSON.stringify(matrix);
          core.debug(`matrix='${matrixString}'`);

          core.setOutput("matrix", matrixString);

          const allReports = await core.group('Build full report list', async () => {
            const res = [];
            for (const data of info) {
              const item = data.reports.map(fp => `${data.path}/${fp}`);

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const allReportsString = JSON.stringify(allReports);
          core.debug(`allReports='${allReportsString}'`);

          core.setOutput("reports", allReportsString);
