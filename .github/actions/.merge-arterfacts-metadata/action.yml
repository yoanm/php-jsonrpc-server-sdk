name: TODO
description: TODO
inputs:
  artifacts-pattern:
    description: TODO
    required: true
outputs:
  metadata-list:
    description: TODO
    value: ${{ steps.merge-metadata.outputs.metadata-list }}
  metadata-list-by-artifact:
    description: TODO
    value: ${{ steps.main.outputs.metadata-list }}
  matrix:
    description: TODO
    value: ${{ steps.merge-metadata.outputs.matrix }}
  reports:
    description: TODO
    value: ${{ steps.main.merge-metadata.reports }}
  reports-by-artifact:
    description: TODO
    value: ${{ steps.main.outputs.reports }}

runs:
  using: "composite"
  steps:
    # @TODO move merge-metadata action to a dedicated repo and remove the checkout
    - name: Checkout repository in order to use custom action
      uses: actions/checkout@v3
      with:
        path: ${{ github.action }}-custom-action-repo

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.artifacts-pattern }}
        path: ${{ github.action }}-artifacts

    - name: Merge groups metadata
      id: merge-metadata
      uses: ./${{ github.action }}-custom-action-repo/.github/actions/merge-metadata
      with:
        root: ${{ github.action }}-artifacts

    - name: Enhance merged metadata
      id: main
      uses: actions/github-script@v7
      env:
        METADATA_LIST: ${{ steps.merge-metadata.outputs.metadata-list }}
        MATRIX: ${{ steps.merge-metadata.outputs.matrix }}
        REPORTS: ${{ steps.merge-metadata.outputs.reports }}
      with:
        script: |
          const { METADATA_LIST, MATRIX, REPORTS } = process.env;

          function getArtifactName(groupDirectoryPath) {
            const fullPathItems = groupDirectoryPath.split('/');
            const artifactName = fullPathItems[0];

            return fullPathItems[0];
          }

          function splitMetadataListByArtifact(list) {
            const res = {};
            for (const item of list) {
              if (!Array.isArray(res[item.artifact])) {
                res[item.artifact] = [];
              }
              res[item.artifact].push(item);
            }

            return res;
          }

          async function enhanceMetadataList(itemList) {
            const res = [];
            for (const original of itemList) {
              core.debug(`original='${JSON.stringify(original)}'`);

              const artifactName = getArtifactName(original.path);
              core.info(`Process "${original.name}" group from "${artifactName}" artifact`);

              cons item = {...original, artifact: artifactName};

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return splitMetadataListByArtifact(res);
          }

          const metadataList = await core.group('Enhance metadata list', async () => await enhanceMetadataList(JSON.parse(METADATA_LIST));
          const metadataListString = JSON.stringify(metadataList);
          core.debug(`metadataList='${metadataListString}'`);

          core.setOutput("metadata-list", metadataListString);

          const matrixInclude = await core.group('Enhance reports', async () => {
            const matrixIncludeByArtifact = await enhanceMetadataList(JSON.parse(MATRIX).include);
            const res = [];
            for (const artifactName of Object.keys(matrixIncludeByArtifact)) {
              cons item = {artifact: artifactName, groups: JSON.stringify(matrixIncludeByArtifact[artifactName])};

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const matrix = {include: matrixInclude};

          const matrixString = JSON.stringify(matrix);
          core.debug(`matrix='${matrixString}'`);

          core.setOutput("matrix", matrixString);

          const allReports = await core.group('Enhance reports', async () => await enhanceMetadataList(JSON.parse(REPORTS));
          const allReportsString = JSON.stringify(allReports);
          core.debug(`allReports='${allReportsString}'`);

          core.setOutput("reports", allReportsString);
