name: Group coverage reports
description: |
  Create a directory under provided path holding a copy all reports to upload and a metada file.
  All reports must have the same format !
inputs:
  name:
    description: Name for the group of reports
    required: true
  files:
    description: List of files to include, separated by `file-separator`. Glob pattern supported.
    required: true
  format:
    description: clover, cobertura, lcov, etc (default to clover)
    required: true
    default: 'clover'
  flags:
    description: List of flag, separated by `flag-separator`
    required: false
    default: ''
  root:
    description: Root directory for the new directory (default to current directory)
    required: false
    default: '.'
  follow-symbolic-links:
    description: 'Indicates whether to follow symbolic links'
    default: true
  file-separator:
    description: How to split provided files list (default to ,)
    required: false
    default: ','
  flag-separator:
    description: How to split provided flag list (default to ,)
    required: false
    default: ','

outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:
    # Adding "required" on inputs doesn't actually enforce their requirements ....
    - id: validate-inputs
      uses: actions/github-script@v7
      env:
        NAME: ${{ inputs.name }}
        FORMAT: ${{ inputs.format }}
        FILES: ${{ inputs.files }}
        FILE_SEPARATOR: ${{ inputs.file-separator }}
        FLAG_SEPARATOR: ${{ inputs.flag-separator }}
      with:
        script: |
          core.startGroup('Validate required inputs');
          const { NAME, FILES, FORMAT, FILE_SEPARATOR, FLAG_SEPARATOR } = process.env;

          core.debug(`name='${NAME}'`);
          core.debug(`files='${FILES}'`);
          core.debug(`format='${FORMAT}'`);
          core.debug(`file-separator='${FILE_SEPARATOR}'`);
          core.debug(`flag-separator='${FLAG_SEPARATOR}'`);

          if (0 === NAME.trim().length) {
            core.setFailed('You must provide a name !');
          }
          if (0 === FILES.trim().length) {
            core.setFailed('You must provide a file list !');
          }
          if (0 === FORMAT.trim().length) {
            core.setFailed('You must provide a format !');
          }
          if (0 === FILE_SEPARATOR.trim().length) {
            core.setFailed('File separator is invalid !');
          }
          if (0 === FLAG_SEPARATOR.trim().length) {
            core.setFailed('Flag separator is invalid !');
          }

          core.endGroup();

    - id: build-flag-list
      uses: actions/github-script@v7
      env:
        RAW_LIST: ${{ inputs.flags }}
        SEPARATOR: ${{ inputs.flag-separator }}
      with:
        script: |
          core.startGroup('Build flag list');

          const { RAW_LIST, SEPARATOR } = process.env;

          core.debug(`list='${RAW_LIST}'`);
          core.debug(`separator='${SEPARATOR}'`);

          const res = RAW_LIST.split(SEPARATOR).map(v => v.trim());
          core.debug(`list='${JSON.stringify(res)}'`);

          core.endGroup();

          return res;

    - id: build-file-map
      uses: actions/github-script@v7
      env:
        RAW_LIST: ${{ inputs.files }}
        SEPARATOR: ${{ inputs.file-separator }}
        FOLLOW_SYMLINK: ${{ inputs.follow-symbolic-links }}
      with:
        script: |
          core.startGroup('Build file map');

          const { RAW_LIST, SEPARATOR, FOLLOW_SYMLINK } = process.env;

          const res = []; 
          let counter = 0;
          for (const pattern of RAW_LIST.split(SEPARATOR)) {
            const globber = await glob.create(pattern, {followSymbolicLinks: FOLLOW_SYMLINK})
            for await (const source of globber.globGenerator()) {
              // @TODO remove base path from source !
              const dest = `${{ inputs.root }}/${{ inputs.name }}/report-${++counter}`;
              core.info(`'${source}' => '${dest}'`);
              res.push({source, dest});
            }
          }

          core.debug(`map=${JSON.stringify(res)}`);

          core.endGroup();

          return res;

    - id: create-group-directory
      shell: bash
      run: mkdir -p ${{ inputs.root }}/${{ inputs.name }}

    - name: Create metadata file
      shell: bash
      run: |
        echo '{"name": "${{ inputs.name }}", "format": "${{ inputs.format }}", "flags": ${{ steps.build-flag-list.outputs.result }}, "file-map": ${{ steps.build-file-map.outputs.result }} }' > ${{ inputs.root }}/${{ inputs.name }}/metadata.json

    - id: copy-report-files
      uses: actions/github-script@v7
      env:
        FILE_MAP: ${{ steps.build-file-map.outputs.result }}
      with:
        script: |
          core.startGroup('Copy report files');

          const { FILE_MAP } = process.env;
          JSON.parse(FILE_MAP).forEach(async function (v) {
            core.info(`${v.source} => ${v.dest}`);
            await io.cp(v.source, v.dest);
          });

          core.endGroup();
