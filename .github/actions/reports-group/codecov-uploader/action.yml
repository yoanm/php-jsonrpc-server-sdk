name: TODO
description: TODO

inputs:
  path:
    description: A group directory or a glob pattern in order to find group directories and merge their metadata
    required: true
  token:
    description: Codecov upload token
    required: true
  follow-symbolic-links:
    description: |
      Indicates whether to follow symbolic links when resolving `path`
    default: 'true'

outputs:
  groups:
    description: TODO
    value: ${{ steps.build-outputs.outputs.groups }}
  name:
    description: TODO
    value: ${{ steps.build-outputs.outputs.name }}
  reports:
    description: TODO
    value: ${{ steps.build-outputs.outputs.reports }}
  flags:
    description: TODO
    value: ${{ steps.build-outputs.outputs.flags }}

runs:
  using: "composite"
  steps:
    # Even if an input is marked as "required", an empty value (or no value) may be passed !
    - name: Validate inputs
      uses: actions/github-script@v7
      env:
        INPUT_MAP: ${{ toJson(inputs) }}
      with:
        script: |
          return core.group(
            'Validate inputs', 
            async () => Object.entries(JSON.parse(process.env.INPUT_MAP))
              .forEach(([key, val]) => {
                if (!val.trim()) { throw new Error(`Input required and not supplied: ${name}`); }
              })
          );

    # @TODO move reports-group/load-metadata action to a dedicated repo and remove the checkout
    - uses: actions/checkout@v4
      with:
        path: custom-action-repo

    - name: Load groups metadata
      id: load-metadata
      uses: ./custom-action-repo/.github/actions/reports-group/load-metadata
      with:
        path: ${{ inputs.path }}
        format: string # String in order to concatenate interesting values
        glue-string: ',' # Ensure glue string as it's the expected one by the uploader
        follow-symbolic-links: ${{ inputs.follow-symbolic-links }}

    - name: Build uploader option
      id: build-uploader-options
      uses: actions/github-script@v7
      env:
        METADATA: ${{ steps.load-metadata.outputs.metadata }}
      with:
        script: |
          core.info('Build uploader options');
          const {METADATA} = process.env;
          
          const metadata = JSON.parse(METADATA);
          core.setOutput('name', metadata.name);
          core.setOutput('files', metadata.reportPaths); // Trusted path as it comes from trusted metadata (=from `reports-group/load-metadata`)
          if (metadata.flags.length > 0) {
            core.setOutput('flags', metadata.flags);
          }

    - name: Ensure at least one report to upload
      if: ${{ '' == steps.build-uploader-options.outputs.files }}
      uses: actions/github-script@v7
      with:
        script: |
          core.setFailed('Unable to retrieve any report to upload. Something wrong most likely happened !');

    - name: Upload to codacy
      id: upload
      uses: codecov/codecov-action@v4
      with:
        token: ${{ inputs.token }}
        name: ${{ steps.build-uploader-options.outputs.name }}
        files: ${{ steps.build-uploader-options.outputs.files }}
        flags: ${{ steps.build-uploader-options.outputs.flags }}
        # underlying CLI behavior
        disable_search: true
        # GHAction behavior
        fail_ci_if_error: true
        verbose: ${{ runner.debug == '1' }}

    - name: Build action outputs
      id: build-outputs
      uses: actions/github-script@v7
      env:
        METADATA: ${{ steps.load-metadata.outputs.metadata }}
        REPORT_NAME: ${{ steps.build-uploader-options.outputs.name }}
        REPORT_FILES: ${{ steps.build-uploader-options.outputs.files }}
        REPORT_FLAGS: ${{ steps.build-uploader-options.outputs.flags }}
      with:
        script: |
          core.info('Build output');
          const {REPORT_NAME, REPORT_FILES, REPORT_FLAGS, METADATA} = process.env;
          
          const metadata = JSON.parse(METADATA);
          core.setOutput('group', metadata.path.split(',').join('\n')); // Trusted path as it comes from trusted metadata (=from `reports-group/load-metadata`)
          core.setOutput('name', REPORT_NAME);
          core.setOutput('reports', REPORT_FILES.split(',').join('\n')); // Trusted path, see `build-uploader-options` step
          core.setOutput('flags', undefined !== REPORT_FLAGS ? REPORT_FLAGS.split(',').join('\n') : '');
