name: find
description: |
  Find reports group directory under the provided `path`.
  
  Assuming your reports group are located at `build/reports-groups` and the uploader action expect a comma separated list of items
  # Find all reports group to manage, grouped by format and flags
  
  ```yaml
  prepare:
    name: Prepare upload
    runs-on: ubuntu-latest
    outputs:
      matrix: $\{{ steps.upload.outputs.matrix }} # See job "Upload" below
      groups: $\{{ steps.upload.outputs.paths }} # List of path to reports group directories
    permissions:
      contents: read
      checks: write # For the check run creation ! @TODO check if doable to use inputs there and set read rather than write if $\{{ !inputs.with-check-run }}
    steps:
      # ... fetch data (checkout, artefacts, etc)

      - uses: ./custom-action-repo/.github/actions/reports-group/attach-check-run-to-triggering-workflow-action
        if: $\{{ 'workflow_run' == github.event_name }}
        with:
          github-token: $\{{ github.token }}
          job-status: $\{{ job.status }}
      - name: Find reports groups
        id: find-groups
        uses: reports-group/find-action@v0.1.0
        with:
          path: build/reports-groups
          #format: string # default value
          glue-string: ','
          group-by: |
            format
            flags
          matrix-mode: true
          #artifacts-mode: true # Uncomment if `build/reports-groups` is the directoy used to fecth artefacts
          #follow-symbolic-links: false # default value
  upload:
    name: Upload groups
    runs-on: ubuntu-latest
    outputs:
      matrix: $\{{ steps.upload.outputs.matrix }} # See job "Upload" below
      groups: $\{{ steps.upload.outputs.paths }} # List of path to reports group directories
    permissions:
      contents: read
      checks: write # For the check run creation ! @TODO check if doable to use inputs there and set read rather than write if `!inputs.with-check-run`
    steps:
      # ... fetch data (checkout, artefacts, etc)

      - uses: ./custom-action-repo/.github/actions/reports-group/attach-check-run-to-triggering-workflow-action
        if: $\{{ 'workflow_run' == github.event_name }}
        with:
          github-token: $\{{ github.token }}
          job-status: $\{{ job.status }}
      - name: Find reports groups
        id: find-groups
        uses: reports-group/find-action@v0.1.0
        with:
          path: build/reports-groups
          #format: string # default value
          glue-string: ','
          group-by: format,flags
          matrix-mode: true
          #artifacts-mode: true # Uncomment if `build/reports-groups` is the directoy used to fecth artefacts
          #follow-symbolic-links: false # default value
  ```
  
  # Group by format
  In order to use metadata list as contexts for a job matrix, add `matrix-mode: true`. See `matrix-mode` description
  
  # Job matrix
  In order to use metadata list as contexts for a job matrix, add `matrix-mode: true`. See `matrix-mode` description  
  

inputs:
  path:
    description: A group directory, or a glob pattern in order to find underlying group directories
    required: true
  format:
    description: |
      `string` (default), `glob-string` or `json`
      - Format `json` is the base output format and produces the following metadata shape:
        - Property `name`: JSON list of unique `metadata.name` values.
        - Property `format`: JSON list of unique `metadata.format` values.
        - Property `reports`: JSON list of unique `metadata.reports` paths.
          In case `artifacts-mode` is enabled, paths are relative paths starting with the artifact directory !
        - Property `flags`: JSON list of unique `metadata.flags` values.
        - Property `path`: JSON list of unique group paths (e.g. `metadata.path` values).
          In case `artifacts-mode` is enabled, paths are relative paths starting with the artifact directory !
        - Property `artifact`: JSON list of unique `metadata.artifact` values.
          **Filled only if `artifacts-mode` is enabled !**
      
        If you are looking to merge multiple group together into a single metadata, rely on reports-group/load-metadata-action instead. If you still
        need to filter in & out and/or to group first, rely on this action and pass the `paths` output to reports-group/load-metadata-action `path` input.
      
      - Format `string` produces the same metadata shape than `json` format, except that every property is joined with `glue-string`, 
        so every property is a string value.
        And in case `artifacts-mode` is enabled, property `artifact` is a glob compatible multiline list of artifact name which can be use 
        as `pattern` when you have to deal with `actions/download-artifact !
        
        It **requires `glue-string` to be filled !**
      
        Note: "Merging phase" is performed **at the end of the process**
      
      - Format `glob-string` produces the same metadata shape as `string` format, except that 
        properties `path` and `reports` are glob compatible multiline string values rather than simply joined with `glue-string`
        
        It implies `string` format for non-path fields, therefore **requires `glue-string` to be filled !**
    required: false
    default: 'string'
  glue-string:
    description: String used to concatenate values.
    required: false
  # "Filtering" phases
  forbidden-groups:
    description: |
      Multiline list of group name.
      If filled, any group matching one of the list will be excluded.

      Note: "Forbidden" phase is performed **at the beginning of the process**, before everything else.
    required: false
    default: ''
  forbidden-formats:
    description: |
      Multiline list of format.
      If filled, any group using a `format` matching one of the list will be excluded.

      Note: "Forbidden" phase is performed **at the beginning of the process**, before everything else.
    required: false
    default: ''
  forbidden-flags:
    description: |
      Multiline list of group name.
      If filled, any group using at least one flag of the list will be excluded.

      Note: "Forbidden" phase is performed **at the beginning of the process**, before everything else.
    required: false
    default: ''
  forbidden-paths:
    description: |
      Multiline list of path. Basic path inclusion matching.
      If filled, any group with a path matching one of the list will be excluded.

      Note: "Forbidden" phase is performed **at the beginning of the process**, before everything else.
    required: false
    default: ''
  allowed-groups:
    description: |
      Multiline list of group name.
      If filled, only groups matching one of the list will be included.
      
      Note: "Allowed" phase is performed **after "Forbidden" phase**.
    required: false
    default: ''
  allowed-formats:
    description: |
      Multiline list of format.
      If filled, only groups using a `format` matching one of the list will be included.
      
      Note: "Allowed" phase is performed **after "Forbidden" phase**.
    required: false
    default: ''
  allowed-flags:
    description: |
      Multiline list of group name.
      If filled, only groups using at least one flag of the list will be included.
      
      Note: "Allowed" phase is performed **after "Forbidden" phase**.
    required: false
    default: ''
  allowed-paths:
    description: |
      Multiline list of path. Basic path inclusion matching.
      If filled, only groups with a path mathcing one of the list will be included.
      
      Note: "Allowed" phase is performed **after "Forbidden" phase**.
    required: false
    default: ''
  # Artifact mode
  artifacts-mode:
    description: |
      Each root directory of the provided `path` will be treated as artifact content. `path` must be a single valid path and not a glob pattern !
      See `format` description for the metadata shape
      
      Note: `artifacts-mode` is applied **after ""Filtering" phases** (`forbidden-*` and `allowed-*`)
    required: false
    default: 'false'
  # Path-only mode
  paths-only-mode:
    description: |
      Setting this to `true` will avoid subsequent operation (only filtering in & out has been performed and `artifacts-mode` enabled if needed) and just
      build the list of path. Use this along with `path` input from reports-group/load-metadata-action in order to quickly merge multiple group into one.
    required: false
    default: 'false'
  # "Grouping" phase
  group-by:
    description: |
      Comma separated list of field used to group metadata list as a set of list. 
      Allowed values are: 
        - `name`: in order to produce a Set where all list contains groups with the same name
        - `format`: in order to produce a Set where all list contains groups with the same format
        - `flags`: in order to produce a Set where all list contains groups with the same **full set of flags**
        - `artifact`: in order to produce a Set where all list contains groups from the same artifact
      Using `flags,format` would produce the smallest set of reports groups to manage regardless of their name.
      If you want to produce set of reports groups for each artifact
      
      Note: "Grouping" phase is performed **after the "Filtering" phase** (`forbidden-*` and `allowed-*`) and after `artifacts-mode` may have been enabled
    required: false
    default: ''
  # Matrix mode
  matrix-mode:
    description: |
      Setting this to `true` will create an output named `matrix` (`list` output won't be filled !) containing a JSON matrix object.
      Re-use it to create job matrix: `matrix: $\{{ fromJson(STEP_OUTPUTS.matrix) }}`
      
      Note: `matrix-mode` is applied at the very end of the process, job context will be the shape attached to `format` description, based on all previous inputs configured
    required: false
    default: 'false'
  follow-symbolic-links:
    description: Indicates whether to follow symbolic links when resolving `path`
    required: false
    default: 'false'

outputs:
  count:
    description: Number of group discovered
  paths:
    description: Glob compatible list of all reports group directory path (=multiline list of paths)
  artifacts:
    description: |
      Glob compatible list of artefact name, can be used as `pattern` with action/download-artifact-action
      Only filled if `artifacts-mode` is enabled !
  list:
    description: |
      JSON list, each item being a JSON metadata shape (the result from the "Grouping phase")
      Empty when `paths-only-mode` or `matrix-mode` is enabled !
      
      Note: See `format` input to figure out the metatada shape based on your inputs
  matrix:
    description: |
      Filled only with `matrix` format and if `paths-only-mode` is not enabled !
      A JSON encoded object which can be re-used as Job matrix by using the following notation: `matrix: $\{{ fromJson(STEP_OUTPUTS.matrix) }}`
      
      See `format` and `matrix-mode` description to figure out the metatada shape based on your inputs

runs:
  using: 'node20'
  main: 'dist/index.js'
