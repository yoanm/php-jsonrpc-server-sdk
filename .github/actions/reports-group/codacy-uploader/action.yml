name: TODO
description: TODO

inputs:
  path:
    description: A group directory or a glob pattern in order to find group directories and merge their metadata
    required: true
  project-token:
    description: Codacy project token for the repository
    required: true
  follow-symbolic-links:
    description: |
      Indicates whether to follow symbolic links when resolving `path`
    default: 'true'
  override-commit:
    description: |
      Commit to link to the uploaded reports.
      Default value:
      - `push` workflow: `github.sha`
      - `pull_request` workflow: `github.event.pull_request.head.sha`
      - `workflow_run` workflow triggered by a `pull_request` or `push` workflow: `github.event.workflow_run.head_sha`
    default: "${{ ('workflow_run' == github.event_name && ('pull_request' == github.event.workflow_run.event || 'push' == github.event.workflow_run.event) && github.event.workflow_run.head_sha) || ('pull_request' == github.event_name && github.event.pull_request.head.sha) || ('push' == github.event_name && github.sha) || null }}"

outputs:
  groups:
    description: TODO
    value: ${{ steps.build-outputs.outputs.groups }}
  reports:
    description: TODO
    value: ${{ steps.build-outputs.outputs.reports }}

runs:
  using: "composite"
  steps:
    # Even if an input is marked as "required", an empty value (or no value) may be passed !
    - name: Validate inputs
      uses: actions/github-script@v7
      env:
        INPUT_MAP: ${{ toJson(inputs) }}
      with:
        script: |
          return core.group(
            'Validate inputs',
            async () => Object.entries(JSON.parse(process.env.INPUT_MAP))
              .forEach(([key, val]) => {
                if (!val.trim()) { throw new Error(`Input required and not supplied: ${key}`); }
              })
          );

    # @TODO move reports-group/load-metadata action to a dedicated repo and remove the checkout
    - uses: actions/checkout@v4
      with:
        path: custom-action-repo

    - name: Load groups metadata
      id: load-metadata
      uses: ./custom-action-repo/.github/actions/reports-group/load-metadata
      with:
        path: ${{ inputs.path }}
        format: string # String in order to concatenate interesting values
        glue-string: ',' # Ensure glue string as it's the expected one by the uploader
        follow-symbolic-links: ${{ inputs.follow-symbolic-links }}

    # @TODO Use bash instead and rely on JQ ?
    # Or create an *internal* action (not published on marketplace and stored inside this action repo) taking metadata JSON as input and returning each property the uploader has ?
    - name: Build uploader option
      id: build-uploader-options
      uses: actions/github-script@v7
      env:
        METADATA: ${{ steps.load-metadata.outputs.metadata }}
      with:
        script: |
          core.info('Build uploader options');
          const {METADATA} = process.env;
          
          const metadata = JSON.parse(METADATA);
          core.setOutput('coverage-reports', metadata.reportPaths); // Trusted path as it comes from trusted metadata (=from `reports-group/load-metadata`)

    - name: Ensure at least one report to upload
      if: ${{ '' == steps.build-uploader-options.outputs.coverage-reports }}
      uses: actions/github-script@v7
      with:
        script: |
          core.setFailed('Unable to retrieve any report to upload. Something wrong most likely happened !');

    - name: Upload to codacy
      id: upload
      # Temporarily rely on internal fork, waiting for updates to be merges on original action
      uses: yoanm/codacy-coverage-reporter-action@43084e173e324c195f9d6cecf5e57621f7e1cfca
      with:
        coverage-reports: ${{ steps.build-uploader-options.outputs.coverage-reports }}
        project-token: ${{ inputs.project-token }}
        force-commit-sha: ${{ inputs.override-commit }}

    - name: Build action outputs
      id: build-outputs
      uses: actions/github-script@v7
      env:
        METADATA: ${{ steps.load-metadata.outputs.metadata }}
        REPORTS: ${{ steps.build-uploader-options.outputs.coverage-reports }}
      with:
        script: |
          core.info('Build output');
          const {REPORTS, METADATA} = process.env;

          const metadata = JSON.parse(METADATA);
          core.setOutput('groups', metadata.path.split(',').join('\n')); // Trusted path as it comes from trusted metadata (=from `reports-group/load-metadata`)
          core.setOutput('reports', REPORTS.split(',').join('\n')); // Trusted path, see `build-uploader-options` step
