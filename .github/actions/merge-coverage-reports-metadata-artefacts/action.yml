name: TODO
description: TODO
inputs:
  artifacts-pattern:
    description: TODO
    required: true
outputs:
  info:
    description: Info
    value: ${{ steps.main.outputs.info }}
  matrix:
    description: Matrix
    value: ${{ steps.main.outputs.matrix }}
  reports:
    description: Reports
    value: ${{ steps.main.outputs.reports }}

runs:
  using: "composite"
  steps:
    # @TODO move merge-coverage-reports-metadata action to a dedicated repo and remove the checkout
    - name: Checkout repository in order to use custom action
      uses: actions/checkout@v3
      with:
        path: ${{ runner.temp }}/custom-action-repo

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.artifacts-pattern }}
        path: ${{ runner.temp }}/coverage-reports-${{ github.action }}

    - name: Build metadata
      id: build-metadata
      uses: ${{ runner.temp }}/custom-action-repo/.github/actions/merge-coverage-reports-metadata
      with:
        root: ${{ runner.temp }}/coverage-reports-${{ github.action }}

    - id: main
      uses: actions/github-script@v7
      env:
        INFO: ${{ steps.build-metadata.outputs.info }}
        MATRIX: ${{ steps.build-metadata.outputs.matrix }}
        REPORTS: ${{ steps.build-metadata.outputs.reports }}
      with:
        script: |
          const {resolve: pathResolve, dirname: pathDirname} = require('path');
          const fs = require('fs');

          const { INFO, MATRIX, REPORTS } = process.env;

          function extractArtefactMetadata(groupPath) {
            const fullPathItems = groupPath.split('/');
            const artifactName = fullPathItems[0];
            const pathFromArtifact = fullPath.replace(`${artifactName}/`, '');

            return {artifact: fullPathItems[0], pathFromArtifact: groupPath.replace(`${artifactName}/`, '')};
          }

          const info = await core.group('Enhance info', async () => {
            const res = [];
            for (const original of JSON.parse(INFO)) {
              core.debug(`original='${JSON.stringify(original)}'`);
              const artifactMetadata = extractArtefactMetadata(original.path);
              core.info(`Process "${original.name}" group from "${artifactMetadata.artifact}" artifact`);

              cons item = {...original, ...artifactMetadata};

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const infoString = JSON.stringify(info);
          core.debug(`info='${infoString}'`);

          core.setOutput("info", infoString);

          const matrixInclude = await core.group('Enhance matrix', async () => {
            const tmpRes = {};
            for (const original of JSON.parse(MATRIX)) {
              core.debug(`original='${JSON.stringify(original)}'`);

              const artifactMetadata = extractArtefactMetadata(original.path);
              core.info(`Process "${original.name}" group from "${artifactMetadata.artifact}" artifact`);

              cons item = {...original, ...artifactMetadata};

              core.debug(`item='${JSON.stringify(item)}'`);

              if (!Array.isArray(tmpRes[artifactMetadata.artifact])) {
                tmpRes[artifactMetadata.artifact] = [];
              }
              tmpRes[artifactMetadata.artifact].push(item);
            }

            const res = [];

            for (const artifactName of Object.keys(tmpRes)) {
              cons item = {artifact: artifactName, groups: JSON.stringify(tmpRes[artifactName])};

              core.debug(`item='${JSON.stringify(item)}'`);

              if (!Array.isArray(tmpRes[artifactMetadata.artifact])) {
                tmpRes[artifactMetadata.artifact] = [];
              }
              res.push(item);
            }

            return res;
          });
          const matrix = {include: matrixInclude};

          const matrixString = JSON.stringify(matrix);
          core.debug(`matrix='${matrixString}'`);

          core.setOutput("matrix", matrixString);

          const allReports = await core.group('Enhance reports', async () => {
            const res = [];
            for (const original of JSON.parse(REPORTS)) {
              core.debug(`original='${JSON.stringify(original)}'`);

              const artifactMetadata = extractArtefactMetadata(original);
              core.info(`Process ${artifactMetadata.artifact}: ${artifactMetadata.pathFromArtifact}`);

              cons item = {...original, ...artifactMetadata};

              core.debug(`item='${JSON.stringify(item)}'`);

              res.push(item);
            }

            return res;
          });
          const allReportsString = JSON.stringify(allReports);
          core.debug(`allReports='${allReportsString}'`);

          core.setOutput("reports", allReportsString);
